openapi: 3.0.0
info:
  title: 'RESTful API Basics #blueprint'
  description: >-
    # 🚀 Get started here


    This template guides you through CRUD operations (GET, POST, PUT, DELETE),
    variables, and tests.


    ## 🔖 **How to use this template**


    #### **Step 1: Send requests**


    RESTful APIs allow you to perform CRUD operations using the POST, GET, PUT,
    and DELETE HTTP methods.


    This collection contains each of these request types. Open each request and
    click "Send" to see what happens.


    #### **Step 2: View responses**


    Observe the response tab for status code (200 OK), response time, and size.


    #### **Step 3: Send new Body data**


    Update or add new data in "Body" in the POST request. Typically, Body data
    is also used in PUT and PATCH requests.


    ```

    {
        "name": "Add your name in the body"
    }


    ```


    #### **Step 4: Update the variable**


    Variables enable you to store and reuse values in Postman. We have created a
    variable called `base_url` with the sample request
    [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me).
    Replace it with your API endpoint to customize this collection.


    #### **Step 5: Add tests in the "Tests" tab**


    Tests help you confirm that your API is working as expected. You can write
    test scripts in JavaScript and view the output in the "Test Results" tab.


    <img
    src="https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n">


    ## 💪 Pro tips


    - Use folders to group related requests and organize the collection.

    - Add more scripts in "Tests" to verify if the API works as expected and
    execute flows.
        

    ## ℹ️ Resources


    [Building
    requests](https://learning.postman.com/docs/sending-requests/requests/)  

    [Authorizing
    requests](https://learning.postman.com/docs/sending-requests/authorization/)  

    [Using
    variables](https://learning.postman.com/docs/sending-requests/variables/)  

    [Managing
    environments](https://learning.postman.com/docs/sending-requests/managing-environments/)  

    [Writing
    scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)
  version: 1.0.0
servers:
  - url: http://{{base_url}}
paths:
  /info:
    get:
      tags:
        - General
      summary: Get data
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - General
      summary: Post data
      description: >-
        This is a POST request, submitting data to an API via the request body.
        This request submits JSON data, and the data is reflected in the
        response.


        A successful POST request typically returns a `200 OK` or `201 Created`
        response code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Add your name in the body
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - General
      summary: Update data
      description: >-
        This is a PUT request and it is used to overwrite an existing piece of
        data. For instance, after you create an entity with a POST request, you
        may want to modify that later. You can do that using a PUT request. You
        typically identify the entity being updated by including an identifier
        in the URL (eg. `id=1`).


        A successful PUT request typically returns a `200 OK`, `201 Created`, or
        `204 No Content` response code.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Add your name in the body
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - General
      summary: Delete data
      description: >-
        This is a DELETE request, and it is used to delete data that was
        previously created via a POST request. You typically identify the entity
        being updated by including an identifier in the URL (eg. `id=1`).


        A successful DELETE request typically returns a `200 OK`, `202
        Accepted`, or `204 No Content` response code.
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          example: '1'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
