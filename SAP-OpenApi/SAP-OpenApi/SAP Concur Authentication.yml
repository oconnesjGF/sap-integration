openapi: 3.0.0
info:
  title: SAP Concur Authentication
  description: >
    This specification describes how the OAuth2/token endpoints are

    implemented by the SAP Concur service provider.


    The endpoint in this specification is derived from a number of RFCs and

    external documents:

      * The OAuth2 framework - [RFC 6749][rfc6749]
      * Proof of Key Code Exchange extension for OAuth2 - [RFC 7636][rfc7636]

    The US production APIs can be found at
    `https://us.api.concursolutions.com/oauth2/token`.


    [rfc6749]: https://tools.ietf.org/html/rfc6749

    [rfc7636]: https://tools.ietf.org/html/rfc7636
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
components:
  securitySchemes:
    oauth2Auth:
      type: http
      scheme: oauth2
security:
  - oauth2Auth: []
tags:
  - name: token
paths:
  /oauth2/v0/token:
    post:
      tags:
        - token
      summary: Request a new access token.
      description: >

        The token endpoint, as described in [RFC 6749 Â§3.2], used in four
        cases:
         * [Password Grant][RFC 6749 Â§4.3]
           * The Password grant can be used when there is a trust relationship between the user and the application. There are two credential types allowed with Password Grant:
             * <b>Password:</b> with this credential type, the application either already has the user’s credentials or can obtain the user’s credentials by directly interacting with the user.
             * <b>AuthToken:</b> This credential type is used for connections from the App Center. For App Center partners and TripLink suppliers, please refer to the [certification documentation][Cert Docs] for more information.
            * Properties:
              * <b>client_id:</b> (Required) <i>String</i> - The client_id of the application.
              * <b>client_secret:</b> (Required) <i>String</i> - The client_secret of the application.
              * <b>grant_type:</b> (Required) <i>String</i> - The credential types allowed with Password Grant.
              * <b>username:</b> (Required) <i>String</i> - The username of the user being authenticated.
              * <b>password:</b> (Required) <i>String</i> - The password of the user being authenticated.
              * <b>cred_type:</b> <i>String</i> - The credential set being submitted in the request, either <i>authtoken</i> or <i>password</i>. For password requests, use <i>password</i>. For connections with the App Center, use <i>authtoken</i>. If omitted, the default is <i>password</i>.
              * <b>scope:</b> <i>String</i> - The scope of the requested access token. This can be used to restrict the new access token to a subset of the scope allowed to the client and token type.
         * [Client Credentials Grant][RFC 6749 Â§4.4]
           * The Client Credentials grant enables an application to get an access token allowing only app-specific operations.
           * Properties:
              * <b>client_id:</b> (Required) <i>String</i> - The client_id of the application.
              * <b>client_secret:</b> (Required) <i>String</i> - The client_secret of the application.
              * <b>grant_type:</b> (Required) <i>String</i> - The credential types allowed with Password Grant.
         * [Token Refresh Grant][RFC 6749 Â§6]
           * The refresh grant is used to refresh an access_token that has expired. This grant can be used anytime a refresh_token is returned in the response of another grant request. No user interaction is required.
           * Properties:
              * <b>client_id:</b> (Required) <i>String</i> - The client_id of the application.
              * <b>client_secret:</b> (Required) <i>String</i> - The client_secret of the application.
              * <b>grant_type:</b> (Required) <i>String</i> - The credential types allowed with Password Grant.
              * <b>refresh_token:</b> (Required) <i>String</i> - An existing valid refresh token to be used to request a new access token.
              * <b>scope:</b> <i>String</i> - The scope of the requested access token. This can be used to restrict the new access token to a subset of the scope allowed to the client and token type.
         * [One Time Password Grant][RFC 6749 Â§4.1]
           * The One-time Password grant type leverages email, phone (text messaging), instant messaging and similar systems to provide per user access tokens to client applications. This grant type requires the following steps:
             * The calling application calls the OAuth2 service specifying the otp grant type along with required parameters.
             * The OAuth2 service generates a one time token which it sends through the messaging mechanism chosen by the application.
             * The user retrieves the token and presents it to the application. The means of having this presented to the application is the responsibility of the application.
             * The application presents this one-time token to the OAuth2 service via the token endpoint.  <b>It is only this step that is covered by this documentation.</b>
            * Properties:
              * <b>client_id:</b> (Required) <i>String</i> - The client_id of the application.
              * <b>client_secret:</b> (Required) <i>String</i> - The client_secret of the application.
              * <b>grant_type:</b> (Required) <i>String</i> - The credential types allowed with Password Grant.
              * <b>channel_handle:</b> (Required) <i>String</i> - The location (email address, phone number) where the one time token should be sent.  Currently only email addresses are allowed.
              * <b>channel_type:</b> (Required) <i>String</i> - The type of messaging system to use. Currently only <i>email</i> is allowed.
              * <b>otp:</b> (Required) <i>String</i> - The one-time token.
              * <b>scope:</b> <i>String</i> - The scope of the requested access token. This can be used to restrict the new access token to a subset of the scope allowed to the client and token type.


        Access Tokens have a one hour lifetime.  If the access token expires,
        the client application must use a Refresh Grant to obtain a new access
        token.


        Refresh Tokens have a six month lifetime. If the refresh token expires,
        the client application must reinitiate the authorization process. When a
        refresh token is used to request a new access token, both a new access
        token as well as a new refresh token are returned in the response. This
        token can change even if most of the time, this value is the same.
        Client applications should treat all returned refresh tokens as new
        tokens and overwrite the stored tokens with the new token from the
        response.


         [RFC 6749 Â§3.2]: https://tools.ietf.org/html/rfc6749#section-3.2
         [RFC 6749 Â§4.1]: https://tools.ietf.org/html/rfc6749#section-4.1
         [RFC 6749 Â§4.3]: https://tools.ietf.org/html/rfc6749#section-4.3
         [RFC 6749 Â§4.4]: https://tools.ietf.org/html/rfc6749#section-4.4
         [RFC 7636 Â§4.5]: https://tools.ietf.org/html/rfc7636#section-4.3
         [RFC 6749 Â§6]: https://tools.ietf.org/html/rfc6749#section-6
         [Cert Docs]: https://developer.concur.com/manage-apps/app-certification.html
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: >-
                    (Required) 

                    * <b>Password Grant Example:</b>

                    client_id=000000000000000000000000000000000000&client_secret=111111111111111111111111111111111111&grant_type=password&username={name
                    of user}&password={password of user}&credtype=password

                    * <b>Client Credentials Grant Example:</b>

                    client_id=000000000000000000000000000000000000&client_secret=111111111111111111111111111111111111&grant_type=client_credentials

                    * <b>Token Refresh Example:</b>

                    client_id=000000000000000000000000000000000000&client_secret=111111111111111111111111111111111111&grant_type=refresh_token&refresh_token=333333333333333333333333333333333333

                    * <b>One Time Password Grant Example:</b>

                    client_id=000000000000000000000000000000000000&client_secret=111111111111111111111111111111111111&grant_type=otp&otp=222222222222222222222222222222222222&channel_handle={email
                    address of user}&channel_type=email
                  example: refresh_token
                client_secret:
                  type: string
                  example: '{{clientSecret}}'
                client_id:
                  type: string
                  example: '{{clientId}}'
                refresh_token:
                  type: string
                  example: '{{refreshToken}}'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                access_token: <string>
                token_type: bearer
                expires_in: <string>
                refresh_token: <string>
                scope: <string>
                idtoken: <string>
                geolocation: <string>
        '400':
          description: Bad Request
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: access_denied
                code: <number>
                error_description: <string>
                geolocation: <string>
        '401':
          description: Unauthorized
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: access_denied
                code: <number>
                error_description: <string>
                geolocation: <string>
        '403':
          description: Forbidden
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: access_denied
                code: <number>
                error_description: <string>
                geolocation: <string>
        '404':
          description: Not Found
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
              example:
                error: access_denied
                code: <number>
                error_description: <string>
                geolocation: <string>
